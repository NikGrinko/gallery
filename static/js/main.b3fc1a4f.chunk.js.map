{"version":3,"sources":["api/api.js","redux/actions/galleryActions.js","media/intro.mp4","pages/StartPage.jsx","hoc/withSuspanse.js","App.js","serviceWorker.js","redux/galleryReducer.js","redux/storeCreater.js","index.js"],"names":["jsonPlaceholderApi","axios","get","getAlbumUserAction","dispatch","then","response","setAlbum","data","getAlbumCoverAction","getCover","setNumberAlbum","type","payload","setPhoto","cover","photo","album","module","exports","Intro","className","muted","loop","autoPlay","src","videoBackground","to","height","width","xmlns","id","withSuspense","Component","props","fallback","Gallery","React","lazy","Album","App","useDispatch","useEffect","openAlbum","useSelector","gallery","exact","path","render","Boolean","window","location","hostname","match","initialState","loading","albums","albumId","thumbnailUrl","title","url","openAlbumName","galleryReducer","state","action","filter","item","userId","getArr","newArr","search","nameKey","myArray","i","length","k","push","name","reducers","combineReducers","composeEnchancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3fc1a4f.chunk.js","sourcesContent":["import axios from 'axios';\r\nexport const jsonPlaceholderApi = {\r\n    getAlbum() {\r\n        return axios\r\n            .get('https://jsonplaceholder.typicode.com/albums')\r\n    },\r\n    getPhotos() {\r\n        return axios\r\n            .get('https://jsonplaceholder.typicode.com/photos')\r\n    }\r\n}\r\n","import { jsonPlaceholderApi } from '../../api/api';\r\nconst GET_ALBUM = 'GET_ALBUM';\r\nconst SET_PHOTO = 'SET_PHOTO';\r\nconst SET_NUMBER_ALBUM = 'SET_NUMBER_ALBUM';\r\nconst GET_COVER = 'GET_COVER';\r\nexport const getAlbumUserAction = () => (dispatch) => {\r\n\r\n    jsonPlaceholderApi.getAlbum()\r\n        .then((response) => {\r\n            dispatch(setAlbum(response.data))\r\n        })\r\n}\r\nexport const getAlbumCoverAction = () => (dispatch) => {\r\n    jsonPlaceholderApi.getPhotos()\r\n        .then((response) => {\r\n            dispatch(getCover(response.data))\r\n        })\r\n}\r\nexport const setNumberAlbum = (data) => (dispatch) => {\r\n\r\n    dispatch({\r\n        type: SET_NUMBER_ALBUM,\r\n        payload: data\r\n    })\r\n\r\n    jsonPlaceholderApi.getPhotos()\r\n        .then((response) => {\r\n            dispatch(setPhoto(response.data))\r\n        })\r\n}\r\nconst getCover = (cover) => ({\r\n    type: GET_COVER,\r\n    payload: cover\r\n})\r\nconst setPhoto = (photo) => ({\r\n    type: SET_PHOTO,\r\n    payload: photo\r\n})\r\nconst setAlbum = (album) => ({\r\n    type: GET_ALBUM,\r\n    payload: album\r\n})","module.exports = __webpack_public_path__ + \"static/media/intro.7f35861d.mp4\";","import React from 'react';\r\nimport videoBackground from '../media/intro.mp4';\r\nimport { NavLink } from 'react-router-dom';\r\nconst Intro = () => {\r\n    return (\r\n        <div className='intro'>\r\n            <div className='intro__media'>\r\n                <video muted loop autoPlay >\r\n                    <source src={videoBackground} />\r\n                </video>\r\n            </div>\r\n            <div className='intro__content'>\r\n                <h1 className='intro__content-title'>Gallery</h1>\r\n                <NavLink to='/gallery' className='intro__content-button'><div className=\"svg-wrapper\">\r\n                    <svg height=\"80\" width=\"300\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <rect id=\"shape\" height=\"80\" width=\"300\" />\r\n                    </svg>\r\n                    <div id=\"text\">\r\n                        Let`s go\r\n                        </div>\r\n                </div></NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Intro;","import React, { Suspense } from 'react';\r\n// import Preloader from \r\nexport const withSuspense = (Component) => {\r\n    return (props) => {\r\n        return <Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props} />\r\n        </Suspense>\r\n    }\r\n}","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Intro from './pages/StartPage';\nimport { Switch, Route } from 'react-router-dom';\nimport { withSuspense } from './hoc/withSuspanse';\nimport { getAlbumUserAction, getAlbumCoverAction } from './redux/actions/galleryActions';\nconst Gallery = React.lazy(() => import('./pages/Gallery'));\nconst Album = React.lazy(() => import('./pages/Album'))\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getAlbumUserAction());\n    dispatch(getAlbumCoverAction());\n  }, [])\n  const { openAlbum } = useSelector(({ gallery }) => gallery);\n\n  return (\n    <div className=\"app\">\n      <Switch>\n        <Route exact path='/' render={() => <Intro />} />\n        <Route exact path='/gallery' render={withSuspense(Gallery)} />\n        <Route exact path={`/gallery/album${openAlbum}`} render={withSuspense(Album)} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const GET_ALBUM = 'GET_ALBUM';\r\nconst SET_PHOTO = 'SET_PHOTO';\r\nconst SET_NUMBER_ALBUM = 'SET_NUMBER_ALBUM';\r\nconst GET_COVER = 'GET_COVER';\r\nconst initialState = {\r\n    loading: false,\r\n    albums: [],\r\n    photo: [],\r\n    cover: [{\r\n        albumId: 1,\r\n        id: 1,\r\n        thumbnailUrl: \"https://via.placeholder.com/150/92c952\",\r\n        title: \"accusamus beatae ad facilis cum similique qui sunt\",\r\n        url: \"https://via.placeholder.com/600/92c952\"\r\n    }],\r\n    openAlbum: null,\r\n    openAlbumName: ''\r\n}\r\n\r\nconst galleryReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_ALBUM:\r\n            return {\r\n                ...state,\r\n                albums: action.payload.filter((item) => item.userId === 1)\r\n            };\r\n        case GET_COVER:\r\n            const getArr = action.payload.filter((item) => item.albumId <= 10)\r\n            const newArr = [];\r\n            function search(nameKey, myArray) {\r\n                for (let i = 0; i < myArray.length; i++) {\r\n                    if (getArr[i].albumId === nameKey) {\r\n                        return myArray[i];\r\n                    }\r\n                }\r\n            }\r\n            for (let k = 1; k <= 10; k++) {\r\n                newArr.push(search(k, getArr))\r\n            }\r\n            return {\r\n                ...state,\r\n                cover: newArr\r\n            }\r\n        case SET_PHOTO:\r\n            return {\r\n                ...state,\r\n                photo: action.payload.filter((item) => item.albumId === state.openAlbum)\r\n            }\r\n        case SET_NUMBER_ALBUM:\r\n\r\n            return {\r\n                ...state,\r\n                openAlbum: action.payload.id,\r\n                openAlbumName: action.payload.name\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default galleryReducer;","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport galleryReducer from './galleryReducer';\r\n\r\nlet reducers = combineReducers({\r\n    gallery: galleryReducer\r\n});\r\nconst composeEnchancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnchancers(applyMiddleware(thunkMiddleware)))\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport store from './redux/storeCreater';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}